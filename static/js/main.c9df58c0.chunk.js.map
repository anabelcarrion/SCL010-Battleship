{"version":3,"sources":["Views/StartGame.js","Components/Pieces.js","Components/CreateGameBoard.js","data/firebase.js","Views/PlacingPieces.js","Components/GameBoardPlayer1.js","Components/GameBoardPlayer2.js","Views/Game.js","Views/EndGame.js","App.js","serviceWorker.js","index.js"],"names":["StartGame","useState","userName","setUserName","id","Input","type","placeholder","onChange","event","target","value","required","to","Button","variant","onClick","localStorage","setItem","JSON","stringify","sentToLocalStorage","src","alt","ShowPieces","useContext","GameBoardPaintContext","setSelectedPiece","selectedPiece","pieces","disabled","dog1","isPlaced","class","dog2","dog3","dog4","dog5","dog6","dog7","React","createContext","name","img","sizeHorizontal","sizeVertical","orientation","CreateGameBoard","emptyPiece","table","h","row","w","state","x","y","piece","tableState","setTableState","isRotated","gameBoardState","PlacingPiecesContext","piecesToSave","setPiecesToSave","copyTable","map","setPiece","removePiece","pieceToDelete","i","length","splice","removePieceToSave","newTable","j","alert","console","log","pieceToAdd","newPieces","sizeH","sizeV","push","addPieceToSave","setID","position","parseInt","toString","Fragment","Paper","Table","TableBody","TableRow","TableCell","data","className","Provider","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","PlacingPieces","docRefGamer","isSavedInFirebase","setIsSavedInFirebase","sentToFirebase","a","getNameFromLocalStorage","parse","getItem","db","firestore","collection","add","name1","checkedPositions","foundPieces","docRef","sentInvitation","window","location","href","piecesToSaveState","GameBoardPlayer1","ContexPlayer1","dataPlayer1","setdataPlayer1","index","checked","createTablePlayer1","positionColor","GameBoardPlayer2","ContexPlayer2","dataPlayer2","setdataPlayer2","savePosition","doc","set","merge","isPositionUccupied","pieceFound","checkPosition","getPlayer1","Promise","resolve","reject","get","then","catch","error","getPlayer2","opponentGameBoardId","Game","isLoading","setIsLoading","isOpponentLoaded","setIsOpponentLoaded","setOpponentGameBoardId","ContexPlayer1State","ContexPlayer2State","useEffect","player1","showWinner","player2","err","EndGame","App","exact","from","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9df58c0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport { Button, Input } from '@material-ui/core';\r\n\r\n// vista incial, donde se va a crear el juego\r\nconst StartGame  = () => {\r\n\r\n  const [userName, setUserName] = useState('Jugador');\r\n  \r\n  //Guardando el nombre ingresado en localstorage y enviando mensaje de whatsapp\r\n  function sentToLocalStorage(userName) {\r\n    localStorage.setItem('name', JSON.stringify(userName));\r\n  }\r\n\r\n  return (\r\n    <div id=\"outer-section\">\r\n    <section id=\"start-game\">\r\n          <Input \r\n          type=\"text\" \r\n          placeholder=\"Nombre\" \r\n          onChange={(event) => setUserName(event.target.value)}\r\n          required={true}>\r\n          </Input>\r\n            <Link to=\"/PlacingPieces\"><Button variant=\"outlined\"\r\n            onClick={() => sentToLocalStorage(userName)}\r\n          >Crear partida</Button></Link>\r\n    </section>\r\n    <a><img src=\"https://i.ibb.co/CzRsWYX/portada.jpg\" alt=\"portada\"></img></a>   \r\n    </div>   \r\n  );\r\n};\r\n\r\nexport default StartGame;\r\n","import React, { useContext } from 'react';\r\nimport './GameBoard.css';\r\nimport {GameBoardPaintContext} from './CreateGameBoard';\r\nimport { Button } from '@material-ui/core';\r\n\r\n// asignar valores a las piezas\r\nconst ShowPieces = () => {\r\n  const {selectedPiece, setSelectedPiece,pieces} = useContext(GameBoardPaintContext);\r\n  return (\r\n    <section id=\"dog-btns\">\r\n       <Button disabled={pieces.dog1.isPlaced} onClick={() => {\r\n          setSelectedPiece(pieces.dog1);   \r\n        }}><i class=\"fas fa-dog\"> 1 </i></Button>\r\n      \r\n        <Button disabled={pieces.dog2.isPlaced} onClick={() => {\r\n          setSelectedPiece(pieces.dog2);   \r\n        }}><i class=\"fas fa-dog\"> 1 </i></Button>\r\n\r\n        <Button disabled={pieces.dog3.isPlaced} onClick={() => {\r\n          setSelectedPiece(pieces.dog3);   \r\n        }}><i class=\"fas fa-dog\"></i> 2 </Button>\r\n\r\n        <Button disabled={pieces.dog4.isPlaced} onClick={() => {\r\n          setSelectedPiece(pieces.dog4);   \r\n        }}><i class=\"fas fa-dog\"></i> 2 </Button>\r\n\r\n        <Button disabled={pieces.dog5.isPlaced} onClick={() => {\r\n          setSelectedPiece(pieces.dog5);   \r\n        }}><i class=\"fas fa-dog\"></i> 3 </Button>\r\n        \r\n        <Button disabled={pieces.dog6.isPlaced} onClick={() => {\r\n          setSelectedPiece(pieces.dog6);   \r\n        }}><i class=\"fas fa-dog\"></i> 4 </Button>\r\n\r\n        <Button disabled={pieces.dog7.isPlaced} onClick={() => {\r\n          setSelectedPiece(pieces.dog7);   \r\n        }}><i class=\"fas fa-dog\"></i> 4 </Button>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ShowPieces;\r\n","import React, { useState, useContext } from 'react';\r\n//import { usePieceState } from './Pieces';\r\nimport './GameBoard.css';\r\nimport ShowPieces from './Pieces';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport { PlacingPiecesContext } from '../Views/PlacingPieces';\r\n\r\n//creando context para GameBorad\r\nexport const GameBoardPaintContext=React.createContext();\r\n//creando context para piezas\r\nexport const PiecesContext=React.createContext();\r\n\r\n// crear los objetos con los valores que tendrán las piezas del juego\r\nlet pieces={\r\n  dog1:{\r\n    name: 'dog1',\r\n    img:'',\r\n    sizeHorizontal:1,\r\n    sizeVertical:1,\r\n    orientation: 'vertical',\r\n    isPlaced:false \r\n  },\r\n  dog2:{\r\n    name: 'dog2',\r\n    img:'',\r\n    sizeHorizontal:1,\r\n    sizeVertical:1,\r\n    orientation: 'vertical',\r\n    isPlaced:false \r\n  },\r\n  dog3:{\r\n    name: 'dog3',\r\n    img:'',\r\n    sizeHorizontal:1,\r\n    sizeVertical:2,\r\n    orientation: 'vertical',\r\n    isPlaced:false \r\n  },\r\n  dog4:{\r\n    name: 'dog4',\r\n    img:'',\r\n    sizeHorizontal:1,\r\n    sizeVertical:2,\r\n    orientation: 'vertical',\r\n    isPlaced:false \r\n  },\r\n  dog5:{\r\n    name: 'dog5',\r\n    img:'',\r\n    sizeHorizontal:1,\r\n    sizeVertical:3,\r\n    orientation: 'vertical',\r\n    isPlaced:false \r\n  },\r\n  dog6:{\r\n    name: 'dog6',\r\n    img:'',\r\n    sizeHorizontal:2,\r\n    sizeVertical:2,\r\n    orientation: 'vertical',\r\n    isPlaced:false\r\n  },\r\n  dog7:{\r\n    name: 'dog7',\r\n    img:'',\r\n    sizeHorizontal:2,\r\n    sizeVertical:2,\r\n    orientation: 'vertical',\r\n    isPlaced:false\r\n  }\r\n}\r\n\r\n\r\n// tablero\r\nconst CreateGameBoard = () => {\r\n  \r\n  //Inicializando pieza\r\n  let emptyPiece = {\r\n    name: '',\r\n    img:'',\r\n    sizeHorizontal:0,\r\n    sizeVertical:0,\r\n    orientation: '',\r\n    isPlaced:false   \r\n  }  \r\n\r\n  // fijar tamaño de tabla\r\n  let tableHeight = 10;\r\n  let tableWidth =10;\r\n  let table = [];\r\n\r\n  // creando la tabla\r\n  for (let h = 0; h < tableHeight; h++) {\r\n    let row = [];\r\n    for (let w = 0; w < tableWidth; w++) {\r\n      row[w] = { state:false, x: h, y: w, piece:emptyPiece};\r\n    }\r\n    table[h] = row;\r\n  }\r\n\r\n  // creando los estados para la tabla y las pieza seleccionada\r\n  //tabla\r\n  const [tableState, setTableState] = useState(table);\r\n  //piezas\r\n  const [selectedPiece, setSelectedPiece] = useState(emptyPiece);\r\n  //Toggle-Buton\r\n  const [isRotated, setIsRotated] = useState(false);\r\n\r\n  //variable que se le pasa el contexto\r\n  const gameBoardState = {selectedPiece,setSelectedPiece, pieces};\r\n\r\n   //contexto\r\n  const {piecesToSave,setPiecesToSave} = useContext(PlacingPiecesContext);\r\n\r\n  //añadiendo piezas\r\n  const addPieceToSave = (pieceToAdd, x, y) => {\r\n    let newPieces = piecesToSave.map(x => x);\r\n    let piece = {x:x,\r\n                 y:y, \r\n                 name: pieceToAdd.name, \r\n                 sizeH: pieceToAdd.sizeHorizontal, \r\n                 sizeV: pieceToAdd.sizeVertical}\r\n    newPieces.push(piece);\r\n    setPiecesToSave(newPieces);\r\n\r\n  }\r\n\r\n  //eliminado piezas\r\n  const removePieceToSave = (pieceToDelete) => {\r\n    for (let i = 0; i < piecesToSave.length; i++) {\r\n      const piece = piecesToSave[i];\r\n      if (piece.name === pieceToDelete.name) {\r\n        piecesToSave.splice(i,1);\r\n        break;\r\n      }      \r\n    }\r\n    setPiecesToSave(piecesToSave.map(x => x));\r\n  }\r\n\r\n  //copiando la tabla\r\n  const copyTable = (table) =>{\r\n    return table.map( x => {\r\n      return x.map( y => {\r\n        return { ...y} \r\n       })\r\n     });\r\n  }\r\n\r\n  // marcar una celda de la tabla y cambiarla de estado\r\n    const setPiece = (x, y) => {\r\n    let sizeHorizontal = selectedPiece.sizeHorizontal;\r\n    let sizeVertical = selectedPiece.sizeVertical;\r\n\r\n    //condicion para saber si en la celda hay un perro\r\n    let removePiece=false;\r\n    if(tableState[x][y].piece.name === ''){ \r\n      if(isRotated){\r\n        sizeHorizontal = selectedPiece.sizeVertical;\r\n        sizeVertical = selectedPiece.sizeHorizontal;\r\n      }\r\n    }else{\r\n      removePiece=true;\r\n      removePieceToSave(tableState[x][y].piece);\r\n      sizeHorizontal = tableState[x][y].piece.sizeHorizontal;\r\n      sizeVertical = tableState[x][y].piece.sizeVertical;\r\n    }\r\n\r\n    if(selectedPiece.name === \"\" && !removePiece){\r\n      return tableState;\r\n    }\r\n\r\n    let newTable = copyTable(tableState);\r\n\r\n    //dibujando la tabla con la pieza\r\n    for (let i=0; i<sizeHorizontal; i++){\r\n      for (let j=0; j<sizeVertical; j++){\r\n        \r\n        if(removePiece && selectedPiece.name === \"\"){\r\n           //removiendo pieza que esta colocada en el tablero \r\n           pieces[newTable[x+i][y+j].piece.name].isPlaced = false;\r\n           newTable[x+i][y+j] = { state:false, x: x+i, y: y+j, piece:emptyPiece};\r\n        }else{ \r\n\r\n          //validando que la pieza no se ponga en los bordes del tablero\r\n        if((x+i)>=newTable.length || (y+j)>=newTable.length){\r\n          alert(\"no hay espacio suficiente para colocar esta pieza\");\r\n          return tableState;\r\n        }\r\n        //validando que la pieza no se ponga sobre otra pieza\r\n        if(tableState[x+i][y+j].state){\r\n          alert(\"no se puede insertar la pieza en donde ya existe una pieza\");\r\n        return tableState;\r\n        }\r\n           //colocando pieza en el tablero  \r\n        newTable[x+i][y+j] = { state:true, x: x, y: y, piece:selectedPiece};\r\n        console.log ('newTable', newTable);\r\n      }\r\n      }\r\n    }\r\n  \r\n    if(!removePiece){\r\n      pieces[selectedPiece.name].isPlaced = true;\r\n      addPieceToSave(selectedPiece, x, y);\r\n    }\r\n    setSelectedPiece(emptyPiece);\r\n    console.log(newTable);\r\n    return newTable;\r\n  };\r\n\r\n  const setID = position => {\r\n    return parseInt(position.x.toString() + position.y.toString()) + 1;\r\n  };\r\n \r\n  return (\r\n    <React.Fragment>\r\n    <section id='gameBoard'>\r\n      <div id='boardPlayer1'>\r\n        </div>\r\n        <Paper>\r\n          <Table id='boardPlayer1'>\r\n            <TableBody>\r\n              {tableState.map(row => (\r\n                <TableRow>\r\n                  {row.map(position => (\r\n                    <TableCell\r\n                      id={setID(position)}\r\n                      data={[position.x, position.y]}\r\n                      className={(tableState[position.x][position.y].state ? \"occupiedCell\" : \"emptyCell\")}\r\n                      onClick={() =>\r\n                        setTableState(setPiece(position.x, position.y))\r\n                      }\r\n                    >\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n    </section>\r\n        <GameBoardPaintContext.Provider value={gameBoardState}>\r\n            <ShowPieces/>\r\n        </GameBoardPaintContext.Provider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CreateGameBoard;\r\n","import * as firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAeZMYmproMg9QIBDdSyCHRRhHPp09s4Fk\",\r\n    authDomain: \"game-battleship.firebaseapp.com\",\r\n    databaseURL: \"https://game-battleship.firebaseio.com\",\r\n    projectId: \"game-battleship\",\r\n    storageBucket: \"game-battleship.appspot.com\",\r\n    messagingSenderId: \"604009782000\",\r\n    appId: \"1:604009782000:web:f9f1a3701e7f2d8d800035\",\r\n    measurementId: \"G-YNKS310318\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React from 'react';\r\nimport CreateGameBoard from '../Components/CreateGameBoard';\r\nimport {Link} from \"react-router-dom\";\r\nimport { Button } from '@material-ui/core';\r\nimport firebase from '../data/firebase'\r\n\r\nexport const PlacingPiecesContext=React.createContext();\r\n\r\nfunction PlacingPieces() {\r\n  \r\n    //Variable que guarda el id del doc\r\n    let docRefGamer;\r\n    const [piecesToSave,setPiecesToSave] = React.useState([]);\r\n    \r\n    const [isSavedInFirebase,setIsSavedInFirebase] = React.useState(false);\r\n    const sentToFirebase = async () => {\r\n      try {\r\n          console.log(piecesToSave);\r\n          const getNameFromLocalStorage = JSON.parse(localStorage.getItem('name'));\r\n          //guardando en firebase\r\n          const db = firebase.firestore();\r\n          let docRef = await db.collection(\"game\").add({\r\n            name1: getNameFromLocalStorage,\r\n            pieces: piecesToSave,\r\n            checkedPositions: [],\r\n            foundPieces: 0  \r\n          })\r\n\r\n          docRefGamer = docRef.id;\r\n          localStorage.setItem('gameId',docRefGamer);\r\n          console.log('id.documento:', docRefGamer);\r\n          setIsSavedInFirebase(true);\r\n          sentInvitation(docRefGamer);\r\n\r\n      } catch (err) {\r\n          console.log('failed');\r\n      }\r\n    }\r\n\r\n    const sentInvitation = (docRefGamer) => {\r\n      //Se envia la petición de enviar por wsp pero falta agregar URL para entrar al juego\r\n      window.location.href = 'whatsapp://send?text=Puedes bañar a estos perritos más rápido que yo? Únete a mi juego ingresando esta clave en tu juego: ' + docRefGamer.toString() \r\n    }\r\n  \r\n  let piecesToSaveState = {piecesToSave,setPiecesToSave};  \r\n\r\n  return (\r\n    <div id=\"outer-placing-pieces\">\r\n    <nav>\r\n    <Link to=\"/StartGame\"><Button id=\"back-btn\"><i class=\"far fa-arrow-alt-circle-left\"></i></Button></Link>\r\n    <h1>Coloca las perritos en el tablero de juego</h1>\r\n    </nav>\r\n    <div id=\"placing-pieces\"> \r\n     <PlacingPiecesContext.Provider value={piecesToSaveState}>\r\n        <CreateGameBoard/>\r\n     </PlacingPiecesContext.Provider>  \r\n    </div>\r\n    <footer>\r\n     <Button variant=\"outlined\"\r\n      onClick={() => sentToFirebase()}>\r\n        1.Guardar Tablero\r\n      </Button>    \r\n      <Link to=\"/Game\"><Button \r\n       variant=\"outlined\" \r\n       disabled = {!isSavedInFirebase}>2.Jugar</Button></Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlacingPieces;","import React, { useState } from 'react';\r\n//import { usePieceState } from './Pieces';\r\nimport './GameBoard.css';\r\nimport {ContexPlayer1} from '../Views/Game';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport { Input } from '@material-ui/core';\r\n\r\nconst GameBoardPlayer1 = () => {\r\n\r\n  //importando contesto\r\n  const {dataPlayer1, setdataPlayer1} = React.useContext(ContexPlayer1);\r\n  // creando la tabla\r\n  const createTablePlayer1=()=>{\r\n    // fijar tamaño de tabla\r\n    let tableHeight = 10;\r\n    let tableWidth =10;\r\n    let table = [];\r\n\r\n    for (let h = 0; h < tableHeight; h++) {\r\n      let row = [];\r\n      for (let w = 0; w < tableWidth; w++) {\r\n       row[w] = { state:false, x: h, y: w};\r\n      }\r\n      table[h] = row;\r\n    }\r\n    \r\n    //llenar la tabla\r\n    for (let index = 0; index < dataPlayer1.pieces.length; index++) {\r\n      let piece = dataPlayer1.pieces[index];\r\n      for (let i=piece.x; i< piece.x + piece.sizeH; i++){\r\n        for (let j=piece.y; j< piece.y + piece.sizeV; j++){\r\n          table [i][j].state = true; \r\n        }\r\n      }     \r\n    }\r\n    console.log(dataPlayer1)\r\n    for (let i = 0; i < dataPlayer1.checkedPositions.length; i++) {\r\n      let position = dataPlayer1.checkedPositions[i];\r\n      table [position.x][position.y].checked = true;\r\n    }\r\n    return table;\r\n  }\r\n\r\n\r\n  const [tableState, setTableState] = useState(createTablePlayer1());\r\n  \r\n  const copyTable = (table) =>{\r\n    return table.map( x => {\r\n      return x.map( y => {\r\n        return { ...y} \r\n       })\r\n     });\r\n  }\r\n\r\n  const positionColor = (position) => {\r\n    if(position.state){\r\n      if(position.checked){\r\n        return \"cleanDog\";\r\n      }else{\r\n        return \"dirtyDog\";\r\n      }\r\n    }else{\r\n      if (position.checked){\r\n        return \"water\";\r\n      }\r\n    }\r\n    return \"emptyCell\";\r\n  }\r\n\r\n    return (\r\n      <div id='gameBoard'>\r\n        <Paper>\r\n          <Table id='boardPlayer1'>\r\n            <TableBody>\r\n              {tableState.map(row => (\r\n                <TableRow>\r\n                  {row.map(position => (\r\n                    <TableCell\r\n                      data={[position.x, position.y]}\r\n                      className={positionColor(position)}\r\n                      onClick={() =>\r\n                        console.log(\"clic\")\r\n                      }\r\n                    >\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default GameBoardPlayer1;\r\n","import React, { useState } from 'react';\r\n//import { usePieceState } from './Pieces';\r\nimport './GameBoard.css';\r\nimport {ContexPlayer2} from '../Views/Game';\r\nimport firebase from '../data/firebase'\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\n\r\nlet checkedPositions=[];\r\nlet foundPieces=0;\r\n\r\nconst GameBoardPlayer2 = () => {\r\n\r\n  //importando contesto\r\n  const {dataPlayer2, setdataPlayer2} = React.useContext(ContexPlayer2);\r\n  // creando la tabla\r\n  const createTablePlayer1=()=>{\r\n    // fijar tamaño de tabla\r\n    let tableHeight = 10;\r\n    let tableWidth =10;\r\n    let table = [];\r\n\r\n    for (let h = 0; h < tableHeight; h++) {\r\n      let row = [];\r\n      for (let w = 0; w < tableWidth; w++) {\r\n       row[w] = { state:false, x: h, y: w, checked:false};\r\n      }\r\n      table[h] = row;\r\n    }\r\n    console.log(dataPlayer2)\r\n    for (let i = 0; i < dataPlayer2.checkedPositions.length; i++) {\r\n      let position = dataPlayer2.checkedPositions[i];\r\n      table [position.x][position.y].checked = true;\r\n    }\r\n    \r\n    \r\n    \r\n    for (let index = 0; index < dataPlayer2.pieces.length; index++) {\r\n      let piece = dataPlayer2.pieces[index];\r\n      for (let i=piece.x; i< piece.x + piece.sizeH; i++){\r\n        for (let j=piece.y; j< piece.y + piece.sizeV; j++){\r\n          if(table [i][j].checked){\r\n            table [i][j].state = true; \r\n          }          \r\n        }\r\n      }     \r\n    }\r\n    return table;\r\n  }\r\n  const [tableState, setTableState] = useState(createTablePlayer1());\r\n  \r\n  const copyTable = (table) =>{\r\n    return table.map( x => {\r\n      return x.map( y => {\r\n        return { ...y} \r\n       })\r\n     });\r\n  }\r\n\r\n  \r\n  const savePosition = (x,y) => {\r\n    checkedPositions.push({x:x, y:y})\r\n    const db = firebase.firestore();\r\n    const data = db.collection('game');\r\n    data.doc(dataPlayer2.id).set({\r\n      checkedPositions:checkedPositions\r\n      }, { merge: true })   \r\n  }\r\n\r\n  const isPositionUccupied=(x,y,piece)=>{\r\n    return x >= piece.x && x < piece.x + piece.sizeH \r\n      && y >= piece.y && y < piece.y + piece.sizeV \r\n  }\r\n\r\n  const addFoundPiece = () =>{\r\n    foundPieces++;\r\n    const db = firebase.firestore();\r\n    const data = db.collection('game');\r\n    data.doc(dataPlayer2.id).set({\r\n      foundPieces:foundPieces\r\n      }, { merge: true })   \r\n  }\r\n  \r\n  const checkPosition=(position)=>{\r\n    let table=copyTable(tableState);\r\n    let pieceFound = false;\r\n    let x = position.x;\r\n    let y = position.y;\r\n    for (let index = 0; index < dataPlayer2.pieces.length; index++){\r\n      let piece= dataPlayer2.pieces[index];\r\n      if(isPositionUccupied(x,y,piece) && !(position.state&&position.checked)){\r\n        alert(\"hay una pieza\");\r\n        addFoundPiece()\r\n        pieceFound = true;\r\n        for (let i=piece.x; i< piece.x + piece.sizeH; i++){\r\n          for (let j=piece.y; j< piece.y + piece.sizeV; j++){\r\n            table [i][j].state = true;\r\n            table [i][j].checked = true;\r\n            savePosition(i,j);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!pieceFound) {\r\n      table [x][y].checked = true;\r\n    }\r\n    savePosition(x,y);\r\n    setTableState(table)\r\n  }\r\n\r\n  const positionColor = (position) => {\r\n    if(position.state){\r\n      if(position.checked){\r\n        return \"cleanDog\";\r\n      }else{\r\n        return \"dirtyDog\";\r\n      }\r\n    }else{\r\n      if (position.checked){\r\n        return \"water\";\r\n      }\r\n    }\r\n    return \"emptyCell\";\r\n  }\r\n\r\n    return (\r\n      <div id='gameBoard'>\r\n        <Paper>\r\n          <Table id='boardPlayer1'>\r\n            <TableBody>\r\n              {tableState.map(row => (\r\n                <TableRow>\r\n                  {row.map(position => (\r\n                    <TableCell\r\n                      data={[position.x, position.y]}\r\n                      className={positionColor(position)}\r\n                      onClick={() =>\r\n                       checkPosition(position)\r\n                      }\r\n                    >\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  \r\n  \r\n};\r\n\r\nexport default GameBoardPlayer2;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport { Button, Input } from '@material-ui/core';\r\nimport GameBoardPlayer1 from '../Components/GameBoardPlayer1';\r\nimport GameBoardPlayer2 from '../Components/GameBoardPlayer2';\r\nimport firebase from '../data/firebase'\r\n\r\n//creando context \r\nexport const ContexPlayer1=React.createContext();\r\nexport const ContexPlayer2=React.createContext();\r\n\r\nfunction getPlayer1(){\r\n  return new Promise((resolve,reject) =>{\r\n        //conexiones a firebase\r\n    const db = firebase.firestore();\r\n    const docRef = db.collection(\"game\").doc(localStorage.getItem('gameId'));\r\n    console.log(\"gameid en get player\", localStorage.getItem('gameId'))\r\n    docRef.get().then(function(doc) {\r\n      console.log(\"documento de firebase\", doc.data())\r\n      resolve(doc.data()) \r\n    }).catch(function(error) {\r\n      console.log(\"Error getting document:\", error);\r\n    });\r\n    console.log()\r\n  })\r\n}\r\n\r\nfunction getPlayer2(opponentGameBoardId){\r\n  return new Promise((resolve,reject) =>{\r\n        //conexiones a firebase\r\n    const db = firebase.firestore();\r\n    const docRef = db.collection(\"game\").doc(opponentGameBoardId);\r\n    console.log(\"gameid en get player\", localStorage.getItem(opponentGameBoardId))\r\n    docRef.get().then(function(doc) {\r\n      console.log(\"documento de firebase\", doc.data())\r\n      resolve(doc.data()) \r\n    }).catch(function(error) {\r\n      console.log(\"Error getting document:\", error);\r\n    });\r\n    console.log()\r\n  })\r\n}\r\n\r\nfunction Game() {\r\n\r\n  // hook\r\n  const [dataPlayer1, setdataPlayer1] = React.useState({pieces:[],checkedPositions:[],foundPieces:0});\r\n  const [dataPlayer2, setdataPlayer2] = React.useState({pieces:[],checkedPositions:[], foundPieces:0});\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isOpponentLoaded, setIsOpponentLoaded] = React.useState(false);\r\n  const [opponentGameBoardId, setOpponentGameBoardId] = React.useState();\r\n\r\n\r\n  //objeto del context\r\n  const ContexPlayer1State = {dataPlayer1,setdataPlayer1};\r\n  const ContexPlayer2State = {dataPlayer2,setdataPlayer2};\r\n  \r\n  React.useEffect(() => {\r\n    // Actualiza el título del documento usando la API del navegadort\r\n    setIsLoading(true);\r\n    getPlayer1()\r\n    .then(player1 => {\r\n      setdataPlayer1(player1);\r\n      setIsLoading(false);\r\n    })\r\n  },[]);\r\n\r\n  const showPlayer2=()=>{\r\n    getPlayer2(opponentGameBoardId)\r\n    .then(player2 => {\r\n      if (player2.name1) {\r\n        player2.id=opponentGameBoardId;\r\n        setdataPlayer2(player2);\r\n        setIsOpponentLoaded(true);\r\n      }else{\r\n        alert(\"codigo del oponente incorrecto\");\r\n      }\r\n      \r\n    })\r\n    .catch (err=> {\r\n      alert(\"codigo del oponente incorrecto\");\r\n      setIsOpponentLoaded(false);\r\n    })\r\n  }\r\n  \r\n  const updateGame=()=>{\r\n    setIsLoading(true);\r\n    setIsOpponentLoaded(false);\r\n    getPlayer1()\r\n    .then(player1 => {\r\n      setdataPlayer1(player1);\r\n      setIsLoading(false);\r\n    });\r\n    getPlayer2(opponentGameBoardId)\r\n    .then(player2 => {\r\n      player2.id=opponentGameBoardId;\r\n      setdataPlayer2(player2);\r\n      setIsOpponentLoaded(true);\r\n    })\r\n  }\r\n\r\n  const showWinner = () => {\r\n    if(dataPlayer1.foundPieces==7){\r\n      return \"El ganador es \" + dataPlayer2.name1;\r\n    }\r\n    if(dataPlayer2.foundPieces==7){\r\n      return \"El ganador es \" + dataPlayer1.name1;\r\n    }\r\n    return \"none\";\r\n  }\r\n  \r\n  return isLoading ? <h1>Cargando Juego ...</h1> : (\r\n    showWinner() != \"none\" ? \r\n    <div>\r\n      {showWinner()}\r\n      <Link to=\"/EndGame\">Terminar juego</Link>\r\n    </div>\r\n    : (\r\n    <div>\r\n      <div className=\"AreaJugador1\">\r\n      <h2>Jugador:{dataPlayer1.name1}</h2>\r\n      <h3> A bañado {dataPlayer2.foundPieces} de 7 perritos</h3>\r\n        <ContexPlayer1.Provider value={ContexPlayer1State}>\r\n        <GameBoardPlayer1/>\r\n        </ContexPlayer1.Provider>\r\n      </div>\r\n      <Button variant=\"outlined\"\r\n          onClick={() => updateGame()}>\r\n            Perrito Bañado\r\n        </Button>\r\n      <div className=\"AreaJugador2\">\r\n      <h2>Jugador:{dataPlayer2.name1}</h2>\r\n      <h3>A bañado {dataPlayer1.foundPieces} de 7 perritos</h3>\r\n      <Input id=\"opponentGameBoardId\"\r\n          type=\"text\" \r\n          placeholder=\"Ingrese codigo\" \r\n          onChange={(event)=>setOpponentGameBoardId(event.target.value)}\r\n         ></Input>\r\n        <Button variant=\"outlined\"\r\n          onClick={() => showPlayer2()}>\r\n            Cargar Oponente\r\n        </Button>\r\n        { !isOpponentLoaded ? <h1>cargando oponente ...</h1> :( <ContexPlayer2.Provider value={ContexPlayer2State}>\r\n      <GameBoardPlayer2/>\r\n    </ContexPlayer2.Provider>)}\r\n    </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport { Button } from '@material-ui/core';\r\n\r\nfunction EndGame() {\r\n  return (\r\n    <div>\r\n      <h1>Has ganado!</h1>\r\n      <h3>No puedes comprar la felicidad pero puedes adoptar un perrito y eso es casi lo mismo</h3>\r\n      <Button><Link to=\"/Game\">Volver</Link></Button>\r\n      <Button><Link to=\"/PlacingPieces\">Revancha</Link></Button>\r\n      <Button variant=\"outlined\"><Link to=\"/StartGame\"></Link>Salir</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EndGame;","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\n\r\n\r\n//importando las vistas\r\nimport StartGame from './Views/StartGame';\r\nimport PlacingPieces from './Views/PlacingPieces';\r\nimport Game from './Views/Game';\r\nimport EndGame from './Views/EndGame';\r\n \r\nconst App=()=> {\r\n  return (\r\n    <Router>\r\n      <React.Fragment>\r\n        <Redirect\r\n            exact\r\n            from=\"/\"\r\n            to=\"/StartGame\" />\r\n          <Switch>\r\n            <Route\r\n              path=\"/StartGame\"\r\n              component={StartGame} />\r\n              <Route\r\n              path=\"/Game\"\r\n              component={Game} />\r\n              <Route\r\n              path=\"/PlacingPieces\"\r\n              component={PlacingPieces} />\r\n               <Route\r\n              path=\"/EndGame\"\r\n              component={EndGame} />\r\n          </Switch>\r\n        </React.Fragment>\r\n      </Router>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}